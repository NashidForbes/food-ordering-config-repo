server.port=0
eureka.client.service-url.defaultZone=http://discoveryserver-springboot:8761/eureka
spring.application.name=orders-service
eureka.instance.preferIpAddress=true
eureka.instance.instance-id=${spring.application.name}:${instanceId:${random.value}}
eureka.instance.preferIpAddress=true
# Enabled to true to enable service discovery on Eureka server
spring.cloud.discovery.enabled=true
spring.cloud.gateway.discovery.locator.enabled=true
spring.cloud.gateway.discovery.locator.lower-case-service-id=true

spring.zipkin.base-url=http://zipkin-service-springboot
management.tracing.sampling.probability=1.0
sleuth.sampler.rate=10

# Debugging on
logging.level.io.axoniq.demo=trace

# We look for Axon Server locally, unless we find a PCF Binding for AxonServer
#axon.axonserver.servers=${vcap.services.AxonServer.credentials.uri:localhost}
axon.axonserver.servers=axonserver:8124

spring.datasource.url=jdbc:postgresql://orders-service-postgres:5432/orders
spring.datasource.username=root
spring.datasource.password=password
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update

axon.serializer.events=jackson
server.error.include-message=always
server.error.include-binding-errors=always

axon.eventhandling.processors.order-group.mode=subscribing

logging.level.org.axonframework.axonserver.connector.event.axon.AxonServerEventStore=TRACE

axoniq.axonserver.keep-alive-time=0
axoniq.axonserver.keep-alive-timeout=604800000
axoniq.axonserver.min-keep-alive-time=604800000
axon.axonserver.token=123abc
